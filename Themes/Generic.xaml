<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:AeonHacs.Wpf.Controls"
        xmlns:c="clr-namespace:AeonHacs.Wpf.Converters"
        xmlns:m="clr-namespace:AeonHacs.Wpf.Media"
        xmlns:s="clr-namespace:AeonHacs.Wpf.Shapes"
        xmlns:v="clr-namespace:AeonHacs.Wpf.Views"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/AeonHacs.Wpf;component/Themes/Defaults.xaml" />
	</ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type s:TubingBase}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}" />
        <Setter Property="TubingSize" Value="1/4" />
    </Style>

    <Style TargetType="{x:Type s:FittingBase}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}" />
        <Setter Property="FittingSize" Value="1/4" />
    </Style>

    <Style TargetType="{x:Type s:UnionUT}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}" />
        <Setter Property="Connection1" Value="1/4" />
        <Setter Property="Connection2" Value="1/4" />
    </Style>

    <Style TargetType="{x:Type s:BreaksealTube}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource GlassBrush}" />
        <Setter Property="Size" Value="ampoule" />
    </Style>

    <Style TargetType="{x:Type s:CultureTube}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource GlassBrush}" />
    </Style>

    <Style TargetType="{x:Type s:Needle}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}" />
    </Style>

    <Style TargetType="{x:Type s:Vial}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Left" >
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                            <GradientStop Color="WhiteSmoke" Offset="0.167" />
                            <GradientStop Color="{DynamicResource GlassColor}" Offset="0.167" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Up" >
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="WhiteSmoke" Offset="0.167" />
                            <GradientStop Color="#88CCCCCC" Offset="0.167" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Right" >
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0.5" EndPoint="0,0.5">
                            <GradientStop Color="WhiteSmoke" Offset="0.167" />
                            <GradientStop Color="#88CCCCCC" Offset="0.167" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Down" >
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                            <GradientStop Color="WhiteSmoke" Offset="0.167" />
                            <GradientStop Color="#88CCCCCC" Offset="0.167" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type s:CO2Cylinder}">
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}" />
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}" />
    </Style>

    <Style TargetType="{x:Type s:Arrow}">
        <Setter Property="Fill" Value="{DynamicResource EdgeBrush}" />
    </Style>

    <Style TargetType="{x:Type v:View}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HelpText" Value="{Binding Component.Name, RelativeSource={RelativeSource Self}, Converter={x:Static c:NameToHelpTextConverter.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:View}">
                    <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:Gauge}">
        <Setter Property="BorderBrush" Value="{DynamicResource EdgeBrush}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
		<Setter Property="ContentStringFormat" Value="0.###############"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:View}">
                    <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <Style TargetType="{x:Type v:Switch}" BasedOn="{StaticResource {x:Type v:View}}">
		<Setter Property="Background" Value="{DynamicResource OffBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource EdgeBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Height" Value="19"/>
		<Setter Property="Width" Value="19"/>
        <Setter Property="IsOn" Value="{Binding Component.IsOn, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="IsOn" Value="True">
                <Setter Property="Background" Value="{DynamicResource OnBrush}" />
            </Trigger>
        </Style.Triggers>
	</Style>

	<Style TargetType="{x:Type v:Heater}" BasedOn="{StaticResource {x:Type v:View}}">
		<Setter Property="Background" Value="{DynamicResource NeutralBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource EdgeBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Height" Value="21"/>
		<Setter Property="Width" Value="21"/>
        <Setter Property="IsOn" Value="{Binding Component.IsOn, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:Heater}">
                    <Border x:Name="shape" Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Elliptical" Value="True">
                            <Setter TargetName="shape" Property="CornerRadius" Value="1e300" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsOn" Value="True">
                <Setter Property="Background" Value="{DynamicResource HotBrush}" />
            </Trigger>
        </Style.Triggers>
	</Style>

	<Style TargetType="{x:Type v:Valve}" BasedOn="{StaticResource {x:Type v:View}}">
		<Setter Property="Background" Value="{DynamicResource UnknownBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EdgeBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Height" Value="19"/>
		<Setter Property="Width" Value="19"/>
        <Setter Property="ValveState" Value="{Binding Component.ValveState, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="ValveState" Value="Closed">
                <Setter Property="Background" Value="{DynamicResource ClosedBrush}" />
            </Trigger>
            <Trigger Property="ValveState" Value="Closing">
                <Setter Property="Background" Value="{DynamicResource ClosingBrush}" />
            </Trigger>
            <Trigger Property="ValveState" Value="Opening">
                <Setter Property="Background" Value="{DynamicResource OpeningBrush}" />
            </Trigger>
            <Trigger Property="ValveState" Value="Opened">
                <Setter Property="Background" Value="{DynamicResource OpenedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type v:Restriction}">
        <Setter Property="Template">
            <Setter.Value>
				<ControlTemplate TargetType="{x:Type v:Restriction}">
					<Path Data="m0.5,0.5 l 3,6 v6 l-3,6 h8 l-3,-6 v-6 l3,-6 z" Stroke="{DynamicResource EdgeBrush}" StrokeLineJoin="Bevel" HorizontalAlignment="Center" VerticalAlignment="Center"/>
				</ControlTemplate>
            </Setter.Value>
        </Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type v:Restriction}">
							<Path Data="m0.5,0.5 l 6,3 h6 l6,-3 v8 l-6,-3 h-6 l-6,3 z" Stroke="{DynamicResource EdgeBrush}" StrokeLineJoin="Bevel" HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
    </Style>

	<Style TargetType="{x:Type v:CoilTrap}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type v:CoilTrap}">
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
						<Canvas Width="31" Height="40">
                            <!--<Path Data="m2.5,0 v41.5 a 4,4 0 0 0 4,4 l22,-2.5 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l16,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource EdgeBrush}" StrokeThickness="5" StrokeLineJoin="Round"/>-->
							<Path Data="m2.5,0 v33.5 a 4,4 0 0 0 4,4 l22,-2.5 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l20,-2 l-20,-2 l16,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource EdgeBrush}" StrokeThickness="5" StrokeLineJoin="Round"/>
                            
                            <Canvas Canvas.Left="7" Canvas.Top="13.5">
								<!--<Line Canvas.Top="26" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="22" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>-->
								<Line Canvas.Top="18" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="14" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="10" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="6" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="2" X1="1.5" Y1="1.5" X2="21.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>

								<!--<Line Canvas.Top="24" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="20" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>-->
								<Line Canvas.Top="16" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="12" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="8" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
								<Line Canvas.Top="4" X1="1.5" Y1="3.5" X2="21.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
							</Canvas>

                            <!--<Path Canvas.Left="1" Canvas.Top="0" Data="m1.5,0 v41.5 a 4,4 0 0 0 4,4 l22,-2.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeLineJoin="Round" StrokeEndLineCap="Round"/>-->
                            <Path Canvas.Left="1" Canvas.Top="0" Data="m1.5,0 v33.5 a 4,4 0 0 0 4,4 l22,-2.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeLineJoin="Round" StrokeEndLineCap="Round"/>
                            <Path Canvas.Left="7" Canvas.Top="0" Data="m1.5,17 l16,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round"/>
						</Canvas>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style TargetType="{x:Type v:CoilTrapSmall}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:CoilTrapSmall}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Canvas Width="31" Height="40">
                            <Path Data="m2.5,0 v33.5 a 4,4 0 0 0 4,4 l16,-2.5 l-14,-2 l14,-2 l-14,-2 l14,-2 l-14,-2 l14,-2 l-14,-2 l14,-2 l-14,-2 l10,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource EdgeBrush}" StrokeThickness="5" StrokeLineJoin="Round"/>

                            <Canvas Canvas.Left="7" Canvas.Top="13.5">
                                <Line Canvas.Top="18" X1="1.5" Y1="1.5" X2="15.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="14" X1="1.5" Y1="1.5" X2="15.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="10" X1="1.5" Y1="1.5" X2="15.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="6" X1="1.5" Y1="1.5" X2="15.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="2" X1="1.5" Y1="1.5" X2="15.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>

                                <Line Canvas.Top="16" X1="1.5" Y1="3.5" X2="15.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="12" X1="1.5" Y1="3.5" X2="15.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="8" X1="1.5" Y1="3.5" X2="15.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="4" X1="1.5" Y1="3.5" X2="15.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                            </Canvas>

                            <Path Canvas.Left="1" Canvas.Top="0" Data="m1.5,0 v33.5 a 4,4 0 0 0 4,4 l16,-2.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeLineJoin="Round" StrokeEndLineCap="Round"/>
                            <Path Canvas.Left="7" Canvas.Top="0" Data="m1.5,17 l10,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round"/>
                        </Canvas>
                        <!--<Canvas Width="31" Height="40">
                            <Path Data="m2.5,0 v33.5 a 4,4 0 0 0 4,4 l18,-2.5 l-16,-2 l16,-2 l-16,-2 l16,-2 l-16,-2 l16,-2 l-16,-2 l16,-2 l-16,-2 l12,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource EdgeBrush}" StrokeThickness="5" StrokeLineJoin="Round"/>

                            <Canvas Canvas.Left="7" Canvas.Top="13.5">
                                <Line Canvas.Top="18" X1="1.5" Y1="1.5" X2="17.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="14" X1="1.5" Y1="1.5" X2="17.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="10" X1="1.5" Y1="1.5" X2="17.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="6" X1="1.5" Y1="1.5" X2="17.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="2" X1="1.5" Y1="1.5" X2="17.5" Y2="3.5" Stroke="Gray" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>

                                <Line Canvas.Top="16" X1="1.5" Y1="3.5" X2="17.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="12" X1="1.5" Y1="3.5" X2="17.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="8" X1="1.5" Y1="3.5" X2="17.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                                <Line Canvas.Top="4" X1="1.5" Y1="3.5" X2="17.5" Y2="1.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                            </Canvas>

                            <Path Canvas.Left="1" Canvas.Top="0" Data="m1.5,0 v33.5 a 4,4 0 0 0 4,4 l18,-2.5" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeLineJoin="Round" StrokeEndLineCap="Round"/>
                            <Path Canvas.Left="7" Canvas.Top="0" Data="m1.5,17 l12,-1.6 a 4,4 0 0 0 4,-4 V0" Stroke="{DynamicResource BodyBrush}" StrokeThickness="3" StrokeStartLineCap="Round"/>
                        </Canvas>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:Chamber}">
        <Setter Property="Fill" Value="{DynamicResource BodyBrush}"/>
        <Setter Property="Stroke" Value="{DynamicResource EdgeBrush}"/>
        <Setter Property="Thickness" Value="8"/>
        <Setter Property="HitDetectionThickness" Value="33" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:Chamber}">
                    <Grid>
                        <Path Data="{TemplateBinding Data}" StrokeThickness="{TemplateBinding HitDetectionThickness}"
                              Stroke="Transparent" d:Stroke="#2200FFFF"/>
                        <Path Fill="{TemplateBinding Fill}" Stroke="{TemplateBinding Stroke}" StrokeThickness="{TemplateBinding StrokeThickness}">
                            <Path.Data>
                                <MultiBinding Converter="{x:Static c:WidenedGeometryConverter.Instance}">
                                    <Binding Path="Data" RelativeSource="{RelativeSource AncestorType={x:Type v:Chamber}}"/>
                                    <Binding Path="Thickness" RelativeSource="{RelativeSource AncestorType={x:Type v:Chamber}}"/>
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:FTC}" BasedOn="{StaticResource {x:Type v:View}}">
        <Setter Property="Background" Value="{DynamicResource FoamBrush}" />
        <Setter Property="FillLevel" Value="{Binding Component.Temperature, RelativeSource={RelativeSource Self}, Converter={x:Static c:ScaledValueConverter.LiquidNitrogen}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:FTC}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <Border x:Name="fill">
                            <ContentPresenter MinWidth="21" MinHeight="21"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Left">
                            <Setter TargetName="fill" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="1,0.5" EndPoint="0,0.5">
                                        <GradientStop Color="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DarkenConverter.Instance}, ConverterParameter=0.2}" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <GradientStop Color="Transparent" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Up">
                            <Setter TargetName="fill" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                        <GradientStop x:Name="liquid" Color="#339CFF" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <GradientStop x:Name="air" Color="Transparent" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Right">
                            <Setter TargetName="fill" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                        <GradientStop Color="#339CFF" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <GradientStop Color="Transparent" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Down">
                            <Setter TargetName="fill" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#339CFF" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <GradientStop Color="Transparent" Offset="{Binding FillLevel, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:Breakseal}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:Breakseal}">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <local:StackingPanel>
                            <s:ConvolutedTubing x:Name="tube" TubingSize="3/8" />
                            <s:UnionUT Connection1="3/8" Connection2="1/4" />
                            <s:BreaksealTube x:Name="sample" Size="2,60" Stickout="17" />
                        </local:StackingPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Up">
                            <Setter TargetName="tube" Property="Data" Value="M0,0 v5 m0,0 v13 m0,0 v5" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Down">
                            <Setter TargetName="tube" Property="Data" Value="M0,0 v5 m0,0 v13 m0,0 v5" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Left">
                            <Setter TargetName="tube" Property="Data" Value="M0,0 h5 m0,0 h13 m0,0 h5" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Right">
                            <Setter TargetName="tube" Property="Data" Value="M0,0 h5 m0,0 h13 m0,0 h5" />
                        </Trigger>
                        <Trigger Property="State" Value="Empty">
                            <Setter TargetName="sample" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:Needle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:Needle}">
                    <Grid>
                        <local:StackingPanel IsHitTestVisible="False">
                            <s:Needle Size="3/8"/>
                        </local:StackingPanel>
                        <local:StackingPanel Offset="11" IsHitTestVisible="False">
                            <s:Vial x:Name="sample"/>
                            <!-- Hack to make contents line up between port types. TODO fix -->
                            <local:StackingPanel Offset="14"/>
                        </local:StackingPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Empty">
                            <Setter TargetName="sample" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:CombustionChamber}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:CombustionChamber}">
                    <Grid>
                        <local:StackingPanel>
                            <s:CultureTube x:Name="sample" Size="combustion" IsHitTestVisible="False"/>
                            <s:Short x:Name="flowthrough" TubingSize="3/8" Length="63" IsHitTestVisible="False" Visibility="Collapsed" Fill="{DynamicResource GlassBrush}"/>
                        </local:StackingPanel>
                        <local:StackingPanel Offset="6" Spacing="2">
                            <v:Heater x:Name="CCQ" Component="{TemplateBinding QuartzFurnace}" />
                            <v:Heater x:Name="CCS" Component="{TemplateBinding SampleFurnace}" Visibility="{Binding Component, RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToVisibilityConverter.Hidden}}" />
                        </local:StackingPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Up">
                            <Setter TargetName="CCS" Property="Height" Value="31" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Down">
                            <Setter TargetName="CCS" Property="Height" Value="31" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Left">
                            <Setter TargetName="CCS" Property="Width" Value="31" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Right">
                            <Setter TargetName="CCS" Property="Width" Value="31" />
                        </Trigger>
                        <Trigger Property="State" Value="Empty">
                            <Setter TargetName="sample" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="QuartzFurnace" Value="{x:Null}">
                            <Setter TargetName="CCQ" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="SampleFurnace" Value="{x:Null}">
                            <Setter TargetName="CCS" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsFlowThrough" Value="True">
                            <Setter TargetName="sample" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="flowthrough" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:Port}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Valve" Value="{Binding Component.Valve, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Left">
                <Setter Property="Height" Value="21" />
            </Trigger>
            <Trigger Property="Orientation" Value="Up">
                <Setter Property="Width" Value="21" />
            </Trigger>
            <Trigger Property="Orientation" Value="Right">
                <Setter Property="Height" Value="21" />
            </Trigger>
            <Trigger Property="Orientation" Value="Down">
                <Setter Property="Width" Value="21" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type v:InletPort}" BasedOn="{StaticResource {x:Type v:Port}}">
        <Setter Property="PortType" Value="{Binding Component.PortType, RelativeSource={RelativeSource Self}}" />
        <Setter Property="QuartzFurnace" Value="{Binding Component.QuartzFurnace, RelativeSource={RelativeSource Self}}" />
        <Setter Property="SampleFurnace" Value="{Binding Component.SampleFurnace, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:InletPort}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            DataContext="{Binding Component, RelativeSource={RelativeSource TemplatedParent}}">
                        <local:StackingPanel>
                            <v:Valve Component="{TemplateBinding Valve}" d:ValveState="Closed" />
                            <s:Stub IsHitTestVisible="False" />
                            <s:Short TubingSize="1/4" Length="2" IsHitTestVisible="False" />
                            <s:UnionUT Connection1="1/4" Connection2="3/8" IsHitTestVisible="False" />
                            <local:StackingPanel x:Name="word">
                                <v:CombustionChamber x:Name="combustion" Visibility="Collapsed" />
                                <v:Needle x:Name="needle" Visibility="Collapsed" />
                                <v:Breakseal x:Name="manual" Visibility="Collapsed" />
                                <local:StackingPanel x:Name="contents" Offset="3">
                                    <TextBlock Text="{Binding Contents}" TextTrimming="WordEllipsis" v:View.Component="{Binding Sample}"
                                               LineHeight="14" LineStackingStrategy="BlockLineHeight"/>
                                </local:StackingPanel>
                            </local:StackingPanel>
                        </local:StackingPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PortType" Value="Combustion">
                            <Setter TargetName="combustion" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="PortType" Value="Needle">
                            <Setter TargetName="needle" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="PortType" Value="Manual">
                            <Setter TargetName="manual" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="State" Value="Disabled">
                            <Setter TargetName="word" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="PortType" Value="FlowThrough">
                            <Setter TargetName="combustion" Property="Visibility" Value="Visible" />
                            <Setter TargetName="combustion" Property="IsFlowThrough" Value="True" />
                            <Setter TargetName="contents" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:AuxiliaryPort}" BasedOn="{StaticResource {x:Type v:Port}}">
        <Setter Property="PortType" Value="Needle" />
        <Setter Property="Coldfinger" Value="{Binding Component.Coldfinger, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:AuxiliaryPort}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            DataContext="{Binding Component, RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <local:StackingPanel Offset="51">
                                <v:FTC Component="{TemplateBinding Coldfinger}" />
                                <local:StackingPanel x:Name="contents" Offset="3">
                                    <TextBlock Text="{Binding Contents}" TextTrimming="WordEllipsis" v:View.Component="{Binding Sample}"
                                           LineHeight="14" LineStackingStrategy="BlockLineHeight"/>
                                </local:StackingPanel>
                            </local:StackingPanel>
                            <local:StackingPanel>
                                <v:Valve Component="{TemplateBinding Valve}" d:ValveState="Closed" />
                                <s:Stub x:Name="stub" FittingSize="1/4" IsHitTestVisible="False" />
                                <s:CultureTube x:Name="ampoule" Size="ampoule" Visibility="Collapsed" IsHitTestVisible="False" />
                                <Grid x:Name="needle" Visibility="Collapsed" IsHitTestVisible="False">
                                    <local:StackingPanel>
                                        <s:Needle Size="1/4" />
                                    </local:StackingPanel>
                                    <local:StackingPanel Offset="10">
                                        <s:Vial />
                                    </local:StackingPanel>
                                </Grid>
                            </local:StackingPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PortType" Value="Ampoule">
                            <Setter TargetName="ampoule" Property="Visibility" Value="Visible" />
                            <Setter TargetName="stub" Property="FittingSize" Value="1/4" />
                        </Trigger>
                        <Trigger Property="PortType" Value="Needle">
                            <Setter TargetName="needle" Property="Visibility" Value="Visible" />
                            <Setter TargetName="stub" Property="FittingSize" Value="3/8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:GasSupply}" BasedOn="{StaticResource {x:Type v:Port}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:GasSupply}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            DataContext="{Binding Component, RelativeSource={RelativeSource TemplatedParent}}">
                        <local:StackingPanel>
                            <v:Valve Component="{TemplateBinding Valve}" d:ValveState="Closed" />
                            <local:StackingPanel Visibility="{Binding FlowValve, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.Collapsed}}">
                                <s:Connection IsHitTestVisible="False"/>
                                <v:Valve Component="{TemplateBinding FlowValve}" d:ValveState="Closed">
                                    <v:Restriction x:Name="restriction"/>
                                </v:Valve>
                            </local:StackingPanel>
                            <s:Break IsHitTestVisible="False" />
                            <s:Arrow IsHitTestVisible="False" />
                            <local:StackingPanel Offset="3" IsHitTestVisible="False">
                                <TextBlock Text="{TemplateBinding GasName, Converter={x:Static c:ChemicalFormulaConverter.Default}}"
                                           LineHeight="14" LineStackingStrategy="BlockLineHeight"/>
                            </local:StackingPanel>
                        </local:StackingPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Left">
                            <Setter TargetName="restriction" Property="Orientation" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:GraphiteReactor}" BasedOn="{StaticResource {x:Type v:Port}}">
        <Setter Property="Coldfinger" Value="{Binding Component.Coldfinger, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Heater" Value="{Binding Component.Heater, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="v:GraphiteReactor">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            DataContext="{Binding Component, RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <local:StackingPanel Offset="51">
                                <v:FTC Component="{TemplateBinding Coldfinger}" />
                                <local:StackingPanel x:Name="contents" Offset="3">
                                    <TextBlock Text="{Binding Contents}" TextTrimming="WordEllipsis" v:View.Component="{Binding Sample}"
                                           LineHeight="14" LineStackingStrategy="BlockLineHeight"/>
                                </local:StackingPanel>
                            </local:StackingPanel>
                            <local:StackingPanel>
                                <v:Valve Component="{TemplateBinding Valve}" d:ValveState="Opened"/>
                                <s:Stub Length="30" IsHitTestVisible="False" />
                                <s:CultureTube Size="6mm" IsHitTestVisible="False" />
                            </local:StackingPanel>
                            <local:StackingPanel Offset="25">
                                <v:Heater Elliptical="True" Component="{TemplateBinding Heater}" />
                            </local:StackingPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:CO2Chamber}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:CO2Chamber}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <local:StackingPanel IsHitTestVisible="False">
                            <s:Stub />
                            <s:CO2Cylinder />
                        </local:StackingPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type v:CustomGauge}">
        <Setter Property="Background" Value="{DynamicResource GaugeBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource EdgeBrush}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="ContentStringFormat" Value="0.###############"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type v:CustomGauge}">
                    <Grid>
                        <Label Content="{TemplateBinding DefaultContentString}" Padding="{TemplateBinding Padding}" Visibility="Hidden" />
                        <Border Background="{TemplateBinding Background}"
							    BorderBrush="{TemplateBinding BorderBrush}"
							    BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type local:NumericUpDown}">
        <Setter Property="BorderBrush" Value="{x:Static SystemColors.ActiveBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericUpDown}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
							Padding="1">
                        <Grid Grid.IsSharedSizeScope="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="Dummy" Text="#" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden"/>
                            <TextBox x:Name="PART_Text" Grid.Row="0" Grid.Column="0" Margin="-1,-1,1,1" VerticalAlignment="Stretch"
									 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									 Background="{x:Null}" BorderThickness="0" 
									 Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}, StringFormat=0.##, UpdateSourceTrigger=PropertyChanged}"/>
                            <Grid Grid.Row="0" Grid.Column="1" MinWidth="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="1"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="1"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton x:Name="PART_DecreaseButton" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" BorderThickness="1">
                                    <Path x:Name="MinusGlyph" Data="M 0,0 7,0 7,1 0,1 Z" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Width="{Binding ActualWidth, ElementName=Dummy}" SnapsToDevicePixels="True"/>
                                </RepeatButton>
                                <RepeatButton x:Name="PART_IncreaseButton" Grid.Row="0" Grid.RowSpan="3" Grid.Column="2" BorderThickness="1">
                                    <Path x:Name="PlusGlyph" Data="M 3,0 v3 h-3 v1 h3 v3 h1 v-3 h3 v-1 h-3 v-3 Z" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Width="{Binding ActualWidth, ElementName=Dummy}" SnapsToDevicePixels="True"/>
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ValueSlider}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ValueSlider}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Canvas x:Name="PART_Bounds" ClipToBounds="True">
                            <Canvas x:Name="PART_Slider" Canvas.Left="{Binding SliderPosition.X, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding ActualHeight, ElementName=PART_Bounds}">
                                <Path Canvas.Top="0" Data="M -4,-1 L 0,3 L 4,-1" Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                <Path Canvas.Bottom="-1" Data="M -4,1 L 0,-3 L 4,1" Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                            </Canvas>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Bounds" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ColorSlider}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="LargeChange" Value="5"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="255"/>
        <Setter Property="SmallChange" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ValueSlider}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Border x:Name="Transparent" Background="{x:Static m:SpecialBrushes.TransparentPattern}">
                            <Canvas x:Name="PART_Bounds" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" ClipToBounds="True">
                                <Canvas x:Name="PART_Slider" Canvas.Left="{Binding SliderPosition.X, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding ActualHeight, ElementName=PART_Bounds}">
                                    <Path Canvas.Top="0" Data="M -4,-1 L 0,3 L 4,-1" Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                    <Path Canvas.Bottom="-1" Data="M -4,1 L 0,-3 L 4,1" Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                </Canvas>
                            </Canvas>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Bounds" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <c:CoerceColorConverter x:Key="A255" A="255"/>
    <Style TargetType="{x:Type local:ColorDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorDisplay}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Border Background="{x:Static m:SpecialBrushes.TransparentPattern}">
                            <Border Grid.Column="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                        <GradientStop Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}}" Offset="0.5"/>
                                        <GradientStop Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource A255}}" Offset="0.5"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SLCanvas}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SLCanvas}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_Bounds" Background="Black" ClipToBounds="True">
                            <Border>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop x:Name="PART_HueGradientStop" Color="Red" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border.OpacityMask>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="Transparent" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                            </Border>
                            <Canvas>
                                <Ellipse Width="10" Height="10" Canvas.Right="0" Margin="-5"
										 Canvas.Left="{Binding SelectorPosition.X, RelativeSource={RelativeSource TemplatedParent}}"
										 Canvas.Top="{Binding SelectorPosition.Y, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Ellipse.Fill>
                                        <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                            <GradientStop Color="Transparent" Offset="0.4"/>
                                            <GradientStop Color="White" Offset="0.4"/>
                                            <GradientStop Color="White" Offset="0.6"/>
                                            <GradientStop Color="Black" Offset="0.6"/>
                                            <GradientStop Color="Black" Offset="0.8"/>
                                            <GradientStop Color="White" Offset="0.8"/>
                                        </RadialGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
